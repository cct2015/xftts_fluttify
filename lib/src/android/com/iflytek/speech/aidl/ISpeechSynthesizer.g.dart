//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
mixin com_iflytek_speech_aidl_ISpeechSynthesizer on java_lang_Object {
  

  

  @mustCallSuper
  Future<int> synthesizeToUrl(android_content_Intent var1, com_iflytek_speech_SynthesizerListener var2) {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('synthesizeToUrl::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> startSpeaking(android_content_Intent var1, com_iflytek_speech_SynthesizerListener var2) {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('startSpeaking::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> pauseSpeaking(com_iflytek_speech_SynthesizerListener var1) {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('pauseSpeaking::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> resumeSpeaking(com_iflytek_speech_SynthesizerListener var1) {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('resumeSpeaking::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> stopSpeaking(com_iflytek_speech_SynthesizerListener var1) {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('stopSpeaking::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> isSpeaking() {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('isSpeaking::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<String> getLocalSpeakerList() {
  
  
    if (!fluttifyLogEnabled) {
      debugPrint('getLocalSpeakerList::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}