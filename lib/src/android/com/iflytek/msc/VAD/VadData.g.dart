// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_iflytek_msc_VAD_VadData extends java_lang_Object  {
  //region constants
  
  //endregion

  //region creators
  static Future<com_iflytek_msc_VAD_VadData> create__() async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_msc_VAD_VadData__');
    final object = com_iflytek_msc_VAD_VadData()..refId = refId..tag = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<com_iflytek_msc_VAD_VadData>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchcom_iflytek_msc_VAD_VadData__', {'length': length});
  
    final List<com_iflytek_msc_VAD_VadData> typedResult = resultBatch.map((result) => com_iflytek_msc_VAD_VadData()..refId = result..tag = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_startByte() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_startByte", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_endByte() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_endByte", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_status() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_status", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_volumeLevel() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_volumeLevel", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_waitPauseOrEnd() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_waitPauseOrEnd", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_endRemainFrameNum() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_endRemainFrameNum", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_waitStart() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_waitStart", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_startRemainFrameNum() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_startRemainFrameNum", {'refId': refId});
  
    return result;
  }
  
  Future<Uint8List> get_wavData() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_wavData", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_wavDataSize() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_wavDataSize", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_inSpeech() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_inSpeech", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_audioQuality() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_audioQuality", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_firstOutByte() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_firstOutByte", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_startByte(int startByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_startByte', {'refId': refId, "startByte": startByte});
  
  
  }
  
  Future<void> set_endByte(int endByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_endByte', {'refId': refId, "endByte": endByte});
  
  
  }
  
  Future<void> set_status(int status) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_status', {'refId': refId, "status": status});
  
  
  }
  
  Future<void> set_volumeLevel(int volumeLevel) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_volumeLevel', {'refId': refId, "volumeLevel": volumeLevel});
  
  
  }
  
  Future<void> set_waitPauseOrEnd(int waitPauseOrEnd) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_waitPauseOrEnd', {'refId': refId, "waitPauseOrEnd": waitPauseOrEnd});
  
  
  }
  
  Future<void> set_endRemainFrameNum(int endRemainFrameNum) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_endRemainFrameNum', {'refId': refId, "endRemainFrameNum": endRemainFrameNum});
  
  
  }
  
  Future<void> set_waitStart(int waitStart) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_waitStart', {'refId': refId, "waitStart": waitStart});
  
  
  }
  
  Future<void> set_startRemainFrameNum(int startRemainFrameNum) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_startRemainFrameNum', {'refId': refId, "startRemainFrameNum": startRemainFrameNum});
  
  
  }
  
  Future<void> set_wavData(Uint8List wavData) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_wavData', {'refId': refId, "wavData": wavData});
  
  
  }
  
  Future<void> set_wavDataSize(int wavDataSize) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_wavDataSize', {'refId': refId, "wavDataSize": wavDataSize});
  
  
  }
  
  Future<void> set_inSpeech(int inSpeech) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_inSpeech', {'refId': refId, "inSpeech": inSpeech});
  
  
  }
  
  Future<void> set_audioQuality(int audioQuality) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_audioQuality', {'refId': refId, "audioQuality": audioQuality});
  
  
  }
  
  Future<void> set_firstOutByte(int firstOutByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_firstOutByte', {'refId': refId, "firstOutByte": firstOutByte});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension com_iflytek_msc_VAD_VadData_Batch on List<com_iflytek_msc_VAD_VadData> {
  //region getters
  Future<List<int>> get_startByte_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_startByte_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_endByte_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_endByte_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_status_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_status_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_volumeLevel_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_volumeLevel_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_waitPauseOrEnd_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_waitPauseOrEnd_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_endRemainFrameNum_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_endRemainFrameNum_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_waitStart_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_waitStart_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_startRemainFrameNum_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_startRemainFrameNum_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<Uint8List>> get_wavData_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_wavData_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_wavDataSize_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_wavDataSize_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_inSpeech_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_inSpeech_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_audioQuality_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_audioQuality_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_firstOutByte_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("com.iflytek.msc.VAD.VadData::get_firstOutByte_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_startByte_batch(List<int> startByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_startByte_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "startByte": startByte[i]}]);
  
  
  }
  
  Future<void> set_endByte_batch(List<int> endByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_endByte_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "endByte": endByte[i]}]);
  
  
  }
  
  Future<void> set_status_batch(List<int> status) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_status_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "status": status[i]}]);
  
  
  }
  
  Future<void> set_volumeLevel_batch(List<int> volumeLevel) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_volumeLevel_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "volumeLevel": volumeLevel[i]}]);
  
  
  }
  
  Future<void> set_waitPauseOrEnd_batch(List<int> waitPauseOrEnd) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_waitPauseOrEnd_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "waitPauseOrEnd": waitPauseOrEnd[i]}]);
  
  
  }
  
  Future<void> set_endRemainFrameNum_batch(List<int> endRemainFrameNum) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_endRemainFrameNum_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "endRemainFrameNum": endRemainFrameNum[i]}]);
  
  
  }
  
  Future<void> set_waitStart_batch(List<int> waitStart) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_waitStart_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "waitStart": waitStart[i]}]);
  
  
  }
  
  Future<void> set_startRemainFrameNum_batch(List<int> startRemainFrameNum) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_startRemainFrameNum_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "startRemainFrameNum": startRemainFrameNum[i]}]);
  
  
  }
  
  Future<void> set_wavData_batch(List<Uint8List> wavData) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_wavData_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "wavData": wavData[i]}]);
  
  
  }
  
  Future<void> set_wavDataSize_batch(List<int> wavDataSize) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_wavDataSize_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "wavDataSize": wavDataSize[i]}]);
  
  
  }
  
  Future<void> set_inSpeech_batch(List<int> inSpeech) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_inSpeech_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "inSpeech": inSpeech[i]}]);
  
  
  }
  
  Future<void> set_audioQuality_batch(List<int> audioQuality) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_audioQuality_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "audioQuality": audioQuality[i]}]);
  
  
  }
  
  Future<void> set_firstOutByte_batch(List<int> firstOutByte) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('com.iflytek.msc.VAD.VadData::set_firstOutByte_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "firstOutByte": firstOutByte[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}