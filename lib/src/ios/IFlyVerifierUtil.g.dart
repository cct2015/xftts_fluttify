// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class IFlyVerifierUtil extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlyVerifierUtil> create__() async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createIFlyVerifierUtil');
    final object = IFlyVerifierUtil()..refId = refId..tag = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<IFlyVerifierUtil>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchIFlyVerifierUtil', {'length': length});
  
    final List<IFlyVerifierUtil> typedResult = resultBatch.map((result) => IFlyVerifierUtil()..refId = result..tag = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<String> generateNumberPassword(int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVerifierUtil::generateNumberPassword([\'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVerifierUtil::generateNumberPassword', {"length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<UIImage> ARGBToGray(UIImage sourceImage) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVerifierUtil::ARGBToGray([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVerifierUtil::ARGBToGray', {"sourceImage": sourceImage.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(UIImage()..refId = result..tag = 'xftts_fluttify');
      return UIImage()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  //endregion
}

extension IFlyVerifierUtil_Batch on List<IFlyVerifierUtil> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<List<String>> generateNumberPassword_batch(List<int> length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVerifierUtil::generateNumberPassword_batch', [for (int i = 0; i < this.length; i++) {"length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<UIImage>> ARGBToGray_batch(List<UIImage> sourceImage) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVerifierUtil::ARGBToGray_batch', [for (int i = 0; i < this.length; i++) {"sourceImage": sourceImage[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => UIImage()..refId = result..tag = 'xftts_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}