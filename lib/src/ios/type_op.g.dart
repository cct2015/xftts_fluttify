//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:xftts_fluttify/src/ios/ios.export.g.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
Future<bool> isKindOfIFlySpeechRecognizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechRecognizer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySetting(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySetting', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyRecognizerView(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyRecognizerView', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyPcmRecorder(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyPcmRecorder', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyVoiceWakeuper(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyVoiceWakeuper', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechConstant(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechConstant', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechUnderstander(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechUnderstander', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyDebugLog(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyDebugLog', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyDataUploader(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyDataUploader', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyAudioSession(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyAudioSession', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyUserWords(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyUserWords', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyTextUnderstander(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyTextUnderstander', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechError(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechError', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyResourceUtil(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyResourceUtil', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechUtility(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechUtility', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechEvaluator(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechEvaluator', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyVerifierUtil(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyVerifierUtil', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlyISVRecognizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlyISVRecognizer', {'refId': ref.refId});
  return result;
}

Future<bool> isKindOfIFlySpeechSynthesizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::isKindOfIFlySpeechSynthesizer', {'refId': ref.refId});
  return result;
}


Future<IFlySpeechRecognizer> asIFlySpeechRecognizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechRecognizer', {'refId': ref.refId});
  return IFlySpeechRecognizer()..refId = result;
}

Future<IFlySetting> asIFlySetting(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySetting', {'refId': ref.refId});
  return IFlySetting()..refId = result;
}

Future<IFlyRecognizerView> asIFlyRecognizerView(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyRecognizerView', {'refId': ref.refId});
  return IFlyRecognizerView()..refId = result;
}

Future<IFlyPcmRecorder> asIFlyPcmRecorder(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyPcmRecorder', {'refId': ref.refId});
  return IFlyPcmRecorder()..refId = result;
}

Future<IFlyVoiceWakeuper> asIFlyVoiceWakeuper(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyVoiceWakeuper', {'refId': ref.refId});
  return IFlyVoiceWakeuper()..refId = result;
}

Future<IFlySpeechConstant> asIFlySpeechConstant(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechConstant', {'refId': ref.refId});
  return IFlySpeechConstant()..refId = result;
}

Future<IFlySpeechUnderstander> asIFlySpeechUnderstander(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechUnderstander', {'refId': ref.refId});
  return IFlySpeechUnderstander()..refId = result;
}

Future<IFlyDebugLog> asIFlyDebugLog(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyDebugLog', {'refId': ref.refId});
  return IFlyDebugLog()..refId = result;
}

Future<IFlyDataUploader> asIFlyDataUploader(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyDataUploader', {'refId': ref.refId});
  return IFlyDataUploader()..refId = result;
}

Future<IFlyAudioSession> asIFlyAudioSession(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyAudioSession', {'refId': ref.refId});
  return IFlyAudioSession()..refId = result;
}

Future<IFlyUserWords> asIFlyUserWords(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyUserWords', {'refId': ref.refId});
  return IFlyUserWords()..refId = result;
}

Future<IFlyTextUnderstander> asIFlyTextUnderstander(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyTextUnderstander', {'refId': ref.refId});
  return IFlyTextUnderstander()..refId = result;
}

Future<IFlySpeechError> asIFlySpeechError(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechError', {'refId': ref.refId});
  return IFlySpeechError()..refId = result;
}

Future<IFlyResourceUtil> asIFlyResourceUtil(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyResourceUtil', {'refId': ref.refId});
  return IFlyResourceUtil()..refId = result;
}

Future<IFlySpeechUtility> asIFlySpeechUtility(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechUtility', {'refId': ref.refId});
  return IFlySpeechUtility()..refId = result;
}

Future<IFlySpeechEvaluator> asIFlySpeechEvaluator(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechEvaluator', {'refId': ref.refId});
  return IFlySpeechEvaluator()..refId = result;
}

Future<IFlyVerifierUtil> asIFlyVerifierUtil(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyVerifierUtil', {'refId': ref.refId});
  return IFlyVerifierUtil()..refId = result;
}

Future<IFlyISVRecognizer> asIFlyISVRecognizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlyISVRecognizer', {'refId': ref.refId});
  return IFlyISVRecognizer()..refId = result;
}

Future<IFlySpeechSynthesizer> asIFlySpeechSynthesizer(Ref ref) async {
  final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('RefClass::asIFlySpeechSynthesizer', {'refId': ref.refId});
  return IFlySpeechSynthesizer()..refId = result;
}
