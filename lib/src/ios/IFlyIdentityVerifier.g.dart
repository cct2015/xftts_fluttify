//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class IFlyIdentityVerifier extends NSObject  {
  // generate getters
  

  // generate setters
  Future<void> set_delegate(IFlyIdentityVerifierDelegate delegate) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('IFlyIdentityVerifierDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::IFlyIdentityVerifierDelegate::onCompleted':
            // print log
            if (!fluttifyLogEnabled) {
              print('fluttify-dart-callback: onCompleted([])');
            }
        
            // handle the native call
            delegate?.onCompleted(IFlySpeechError()..refId = (args['error'])..tag = 'xftts_fluttify');
            break;
          case 'Callback::IFlyIdentityVerifierDelegate::onResultsIsLast':
            // print log
            if (!fluttifyLogEnabled) {
              print('fluttify-dart-callback: onResultsIsLast([\'isLast\':$args[isLast]])');
            }
        
            // handle the native call
            delegate?.onResultsIsLast(IFlyIdentityResult()..refId = (args['results'])..tag = 'xftts_fluttify', args['isLast']);
            break;
          case 'Callback::IFlyIdentityVerifierDelegate::onEventArg1arg2extra':
            // print log
            if (!fluttifyLogEnabled) {
              print('fluttify-dart-callback: onEventArg1arg2extra([\'eventType\':$args[eventType], \'arg1\':$args[arg1], \'arg2\':$args[arg2]])');
            }
        
            // handle the native call
            delegate?.onEventArg1arg2extra(args['eventType'], args['arg1'], args['arg2'], NSObject()..refId = (args['obj'])..tag = 'xftts_fluttify');
            break;
          default:
            break;
        }
      });
  }
  

  // generate methods
  static Future<IFlyIdentityVerifier> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlyIdentityVerifier()..refId = result..tag = 'xftts_fluttify');
      return IFlyIdentityVerifier()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  static Future<void> purgeSharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier::purgeSharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::purgeSharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> startWorking() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::startWorking([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::startWorking', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> writeDataoffsetlengthwithParams(String ssub, NSData data, int offset, int length, String params) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::write([\'ssub\':$ssub, \'offset\':$offset, \'length\':$length, \'params\':$params])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::writeDataoffsetlengthwithParams', {"ssub": ssub, "data": data.refId, "offset": offset, "length": length, "params": params, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopWrite(String ssub) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::stopWrite([\'ssub\':$ssub])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::stopWrite', {"ssub": ssub, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> executeCmdparams(String ssub, String cmd, String params) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::execute([\'ssub\':$ssub, \'cmd\':$cmd, \'params\':$params])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::executeCmdparams', {"ssub": ssub, "cmd": cmd, "params": params, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyIdentityVerifier@$refId::cancel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyIdentityVerifier::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}