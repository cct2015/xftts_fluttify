//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class IFlySpeechRecognizer extends NSObject with IFlySpeechRecognizerDelegate {
  // generate getters
  Future<IFlySpeechRecognizerDelegate> get_delegate() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechRecognizer::get_delegate", {'refId': refId});
    kNativeObjectPool.add(IFlySpeechRecognizer()..refId = result..tag = 'xftts_fluttify');
    return IFlySpeechRecognizer()..refId = result..tag = 'xftts_fluttify';
  }
  
  Future<bool> get_isListening() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechRecognizer::get_isListening", {'refId': refId});
  
    return result;
  }
  

  // generate setters
  Future<void> set_delegate(IFlySpeechRecognizerDelegate delegate) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
  
  }
  

  // generate methods
  static Future<IFlySpeechRecognizer> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlySpeechRecognizer()..refId = result..tag = 'xftts_fluttify');
      return IFlySpeechRecognizer()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  Future<bool> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::destroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::destroy', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> parameterForKey(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::parameterForKey([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::parameterForKey', {"key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> startListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::startListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::startListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::stopListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::stopListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::cancel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> buildGrammarCompletionHandlerGrammarTypegrammarContent(void completionHandler(String grammarId, IFlySpeechError error), String grammarType, String grammarContent) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::buildGrammarCompletionHandler([\'grammarType\':$grammarType, \'grammarContent\':$grammarContent])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::buildGrammarCompletionHandlerGrammarTypegrammarContent', {"grammarType": grammarType, "grammarContent": grammarContent, "refId": refId});
  
  
    // handle native call
    MethodChannel('IFlySpeechRecognizer::buildGrammarCompletionHandlerGrammarTypegrammarContent::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::IFlyOnBuildFinishCompletionHandler::IFlyOnBuildFinishCompletionHandler':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              completionHandler(args['grammarId'], IFlySpeechError()..refId = (args['error'])..tag = 'xftts_fluttify');
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> writeAudio(NSData audioData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechRecognizer@$refId::writeAudio([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechRecognizer::writeAudio', {"audioData": audioData.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}