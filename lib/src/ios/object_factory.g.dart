// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';

final _channel = MethodChannel('com.fluttify/xftts_fluttify');

Future<IFlySpeechRecognizer> createIFlySpeechRecognizer() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechRecognizer');
  final object = IFlySpeechRecognizer()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySetting> createIFlySetting() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySetting');
  final object = IFlySetting()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyRecognizerView> createIFlyRecognizerView() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyRecognizerView');
  final object = IFlyRecognizerView()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyPcmRecorder> createIFlyPcmRecorder() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyPcmRecorder');
  final object = IFlyPcmRecorder()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyContact> createIFlyContact() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyContact');
  final object = IFlyContact()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyVoiceWakeuper> createIFlyVoiceWakeuper() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyVoiceWakeuper');
  final object = IFlyVoiceWakeuper()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechConstant> createIFlySpeechConstant() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechConstant');
  final object = IFlySpeechConstant()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechUnderstander> createIFlySpeechUnderstander() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechUnderstander');
  final object = IFlySpeechUnderstander()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyDebugLog> createIFlyDebugLog() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyDebugLog');
  final object = IFlyDebugLog()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyDataUploader> createIFlyDataUploader() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyDataUploader');
  final object = IFlyDataUploader()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyIdentityVerifier> createIFlyIdentityVerifier() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyIdentityVerifier');
  final object = IFlyIdentityVerifier()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyAudioSession> createIFlyAudioSession() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyAudioSession');
  final object = IFlyAudioSession()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyUserWords> createIFlyUserWords() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyUserWords');
  final object = IFlyUserWords()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyTextUnderstander> createIFlyTextUnderstander() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyTextUnderstander');
  final object = IFlyTextUnderstander()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechError> createIFlySpeechError() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechError');
  final object = IFlySpeechError()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyResourceUtil> createIFlyResourceUtil() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyResourceUtil');
  final object = IFlyResourceUtil()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechUtility> createIFlySpeechUtility() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechUtility');
  final object = IFlySpeechUtility()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyIdentityResult> createIFlyIdentityResult() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyIdentityResult');
  final object = IFlyIdentityResult()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechEvaluator> createIFlySpeechEvaluator() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechEvaluator');
  final object = IFlySpeechEvaluator()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyVerifierUtil> createIFlyVerifierUtil() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyVerifierUtil');
  final object = IFlyVerifierUtil()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlyISVRecognizer> createIFlyISVRecognizer() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlyISVRecognizer');
  final object = IFlyISVRecognizer()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

Future<IFlySpeechSynthesizer> createIFlySpeechSynthesizer() async {
  final int refId = await _channel.invokeMethod('ObjectFactory::createIFlySpeechSynthesizer');
  final object = IFlySpeechSynthesizer()..refId = refId..tag = 'xftts_fluttify';

  kNativeObjectPool.add(object);
  return object;
}

