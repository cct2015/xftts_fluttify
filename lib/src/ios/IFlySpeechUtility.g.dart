//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class IFlySpeechUtility extends NSObject  {
  // generate getters
  Future<IFlyEngineMode> get_engineMode() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechUtility::get_engineMode", {'refId': refId});
  
    return IFlyEngineMode.values[result];
  }
  

  // generate setters
  Future<void> set_delegate(IFlySpeechplusDelegate delegate) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('IFlySpeechplusDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::IFlySpeechplusDelegate::onCompleted':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onCompleted([\'errorCode\':$args[errorCode]])');
            }
        
            // handle the native call
            delegate?.onCompleted(args['errorCode']);
            break;
          default:
            break;
        }
      });
  }
  

  // generate methods
  static Future<IFlySpeechUtility> createUtility(String params) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility::createUtility([\'params\':$params])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::createUtility', {"params": params});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlySpeechUtility()..refId = result..tag = 'xftts_fluttify');
      return IFlySpeechUtility()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  static Future<bool> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility::destroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::destroy', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<IFlySpeechUtility> getUtility() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility::getUtility([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::getUtility', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlySpeechUtility()..refId = result..tag = 'xftts_fluttify');
      return IFlySpeechUtility()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> parameterForKey(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility@$refId::parameterForKey([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::parameterForKey', {"key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<bool> checkServiceInstalled() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility::checkServiceInstalled([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::checkServiceInstalled', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> componentUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility::componentUrl([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::componentUrl', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> openSpeechPlus(IFlySpeechPlusServiceType serviceType) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUtility@$refId::openSpeechPlus([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechUtility::openSpeechPlus', {"serviceType": serviceType.index, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}