//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
class IFlyVoiceWakeuper extends NSObject  {
  // generate getters
  Future<bool> get_isListening() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlyVoiceWakeuper::get_isListening", {'refId': refId});
  
    return result;
  }
  

  // generate setters
  Future<void> set_delegate(IFlyVoiceWakeuperDelegate delegate) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('IFlyVoiceWakeuperDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::IFlyVoiceWakeuperDelegate::onBeginOfSpeech':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onBeginOfSpeech([])');
            }
        
            // handle the native call
            delegate?.onBeginOfSpeech();
            break;
          case 'Callback::IFlyVoiceWakeuperDelegate::onEndOfSpeech':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onEndOfSpeech([])');
            }
        
            // handle the native call
            delegate?.onEndOfSpeech();
            break;
          case 'Callback::IFlyVoiceWakeuperDelegate::onCompleted':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onCompleted([])');
            }
        
            // handle the native call
            delegate?.onCompleted(IFlySpeechError()..refId = (args['error'])..tag = 'xftts_fluttify');
            break;
          case 'Callback::IFlyVoiceWakeuperDelegate::onVolumeChanged':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onVolumeChanged([\'volume\':$args[volume]])');
            }
        
            // handle the native call
            delegate?.onVolumeChanged(args['volume']);
            break;
          default:
            break;
        }
      });
  }
  

  // generate methods
  static Future<IFlyVoiceWakeuper> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlyVoiceWakeuper()..refId = result..tag = 'xftts_fluttify');
      return IFlyVoiceWakeuper()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  Future<bool> startListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::startListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::startListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> stopListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::stopListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::stopListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::cancel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> getParameter(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::getParameter([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::getParameter', {"key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> writeAudio(NSData audioData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyVoiceWakeuper@$refId::writeAudio([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlyVoiceWakeuper::writeAudio', {"audioData": audioData.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
}