// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class IFlySpeechError extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlySpeechError> create__() async {
    final int refId = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::createIFlySpeechError');
    final object = IFlySpeechError()..refId = refId..tag = 'xftts_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<IFlySpeechError>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('ObjectFactory::create_batchIFlySpeechError', {'length': length});
  
    final List<IFlySpeechError> typedResult = resultBatch.map((result) => IFlySpeechError()..refId = result..tag = 'xftts_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_errorCode() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorCode", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_errorType() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorType", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_errorDesc() async {
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorDesc", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_errorCode(int errorCode) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorCode', {'refId': refId, "errorCode": errorCode});
  
  
  }
  
  Future<void> set_errorType(int errorType) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorType', {'refId': refId, "errorType": errorType});
  
  
  }
  
  Future<void> set_errorDesc(String errorDesc) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorDesc', {'refId': refId, "errorDesc": errorDesc});
  
  
  }
  
  //endregion

  //region methods
  static Future<IFlySpeechError> initWithError(int errorCode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError::initWithError([\'errorCode\':$errorCode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::initWithError', {"errorCode": errorCode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlySpeechError()..refId = result..tag = 'xftts_fluttify');
      return IFlySpeechError()..refId = result..tag = 'xftts_fluttify';
    }
  }
  
  Future<int> errorCode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError@$refId::errorCode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorCode', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> errorDesc() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechError@$refId::errorDesc([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorDesc', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension IFlySpeechError_Batch on List<IFlySpeechError> {
  //region getters
  Future<List<int>> get_errorCode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorCode_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_errorType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorType_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_errorDesc_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod("IFlySpeechError::get_errorDesc_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_errorCode_batch(List<int> errorCode) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorCode_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "errorCode": errorCode[i]}]);
  
  
  }
  
  Future<void> set_errorType_batch(List<int> errorType) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorType_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "errorType": errorType[i]}]);
  
  
  }
  
  Future<void> set_errorDesc_batch(List<String> errorDesc) async {
    await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::set_errorDesc_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "errorDesc": errorDesc[i]}]);
  
  
  }
  
  //endregion

  //region methods
  Future<List<IFlySpeechError>> initWithError_batch(List<int> errorCode) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::initWithError_batch', [for (int i = 0; i < this.length; i++) {"errorCode": errorCode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => IFlySpeechError()..refId = result..tag = 'xftts_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<List<int>> errorCode_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorCode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<String>> errorDesc_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify').invokeMethod('IFlySpeechError::errorDesc_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}