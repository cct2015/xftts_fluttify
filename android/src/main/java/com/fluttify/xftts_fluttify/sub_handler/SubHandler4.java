//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.xftts_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.xftts_fluttify.XfttsFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler4 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.iflytek.msc.MSC::QISRInit", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISRInit(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISRInit(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISRBuildGrammar", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Object var5 = (Object) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISRBuildGrammar(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISRBuildGrammar(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISRUpdateLexicon", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                String var4 = (String) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                Object var5 = (Object) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISRUpdateLexicon(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISRUpdateLexicon(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISRFini", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISRFini(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISRFini();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QHCRInit", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QHCRInit(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QHCRInit(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QHCRFini", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QHCRFini(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QHCRFini();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISVInit", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISVInit(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISVInit(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISVFini", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISVFini(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISVFini();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPLogin", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPLogin(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPLogin(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::UMSPLogin", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                Object var3 = (Object) ((Map<String, Object>) args).get("var3");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::UMSPLogin(" + var0 + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.UMSPLogin(var0, var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPSetParam", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPSetParam(" + var0 + var1 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPSetParam(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPGetParam", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var1 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPGetParam(" + var0 + var1 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPGetParam(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPUploadData", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var4 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPUploadData(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QMSPUploadData(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPDownloadData", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var1 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPDownloadData(" + var0 + var1 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QMSPDownloadData(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPDownload", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Object var2 = (Object) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPDownload(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPDownload(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPSearch", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var2 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPSearch(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QMSPSearch(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPLogOut", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPLogOut(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPLogOut();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPRegisterNotify", (args, methodResult) -> {
                // args
                // jsonable arg
                String var0 = (String) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPRegisterNotify(" + var0 + var1 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QMSPRegisterNotify(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QMSPGetVersion", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var1 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QMSPGetVersion(" + var0 + var1 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QMSPGetVersion(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISEInit", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISEInit(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISEInit(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QISEFini", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QISEFini(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QISEFini();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIVWResMerge", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIVWResMerge(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QIVWResMerge(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIVWGetResInfo", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // ref arg
                com.iflytek.msc.MSCSessionInfo var2 = (com.iflytek.msc.MSCSessionInfo) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIVWGetResInfo(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QIVWGetResInfo(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIFDInit", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                Object var1 = (Object) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIFDInit(" + var0 + var1 + ")");
                }
            
                // invoke native method
                try {
                    com.iflytek.msc.MSC.QIFDInit(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIFDFacedetect", (args, methodResult) -> {
                // args
                // ref arg
                android.graphics.Bitmap var0 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Object var2 = (Object) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIFDFacedetect(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QIFDFacedetect(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIFDMultitracker", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                Object var6 = (Object) ((Map<String, Object>) args).get("var6");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIFDMultitracker(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.iflytek.msc.MSC.QIFDMultitracker(var0, var1, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::QIFDFini", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::QIFDFini(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.iflytek.msc.MSC.QIFDFini();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.msc.MSC::doARGB2Gray", (args, methodResult) -> {
                // args
                // ref arg
                android.graphics.Bitmap var0 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                // ref arg
                android.graphics.Bitmap var1 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.iflytek.msc.MSC::doARGB2Gray(" + var0 + var1 + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = com.iflytek.msc.MSC.doARGB2Gray(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.iflytek.speech.SpeechComponent::getPackageName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechComponent ref = (com.iflytek.speech.SpeechComponent) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getPackageName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechComponent::getEngines_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechComponent ref = (com.iflytek.speech.SpeechComponent) getHEAP().get(refId);
            
                    // invoke native method
                    List<String> result;
                    try {
                        result = ref.getEngines();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechComponent::addEngine_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechComponent ref = (com.iflytek.speech.SpeechComponent) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addEngine(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechComponent::isEngineAvaible_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechComponent ref = (com.iflytek.speech.SpeechComponent) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isEngineAvaible(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeakerVerifierAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl ref = (com.iflytek.speech.SpeakerVerifierAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeakerVerifierAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl ref = (com.iflytek.speech.SpeakerVerifierAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeakerVerifierAidl::endSpeak_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl ref = (com.iflytek.speech.SpeakerVerifierAidl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.endSpeak();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeakerVerifierAidl::stopSpeak_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl ref = (com.iflytek.speech.SpeakerVerifierAidl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopSpeak();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechUnderstanderAidl::isUnderstanding_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechUnderstanderAidl ref = (com.iflytek.speech.SpeechUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isUnderstanding();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechUnderstanderAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechUnderstanderAidl ref = (com.iflytek.speech.SpeechUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechUnderstanderAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechUnderstanderAidl ref = (com.iflytek.speech.SpeechUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechUnderstanderAidl::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechUnderstanderAidl ref = (com.iflytek.speech.SpeechUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechRecognizerAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechRecognizerAidl ref = (com.iflytek.speech.SpeechRecognizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechRecognizerAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechRecognizerAidl ref = (com.iflytek.speech.SpeechRecognizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechRecognizerAidl::destory_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechRecognizerAidl ref = (com.iflytek.speech.SpeechRecognizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechRecognizerAidl::isListening_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechRecognizerAidl ref = (com.iflytek.speech.SpeechRecognizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechRecognizerAidl::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechRecognizerAidl ref = (com.iflytek.speech.SpeechRecognizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeakerVerifierAidl.DownloadListener::onError_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeakerVerifierAidl.DownloadListener ref = (com.iflytek.speech.SpeakerVerifierAidl.DownloadListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onError(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechSynthesizerAidl::isSpeaking_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechSynthesizerAidl ref = (com.iflytek.speech.SpeechSynthesizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isSpeaking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechSynthesizerAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechSynthesizerAidl ref = (com.iflytek.speech.SpeechSynthesizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechSynthesizerAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechSynthesizerAidl ref = (com.iflytek.speech.SpeechSynthesizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.SpeechSynthesizerAidl::destory_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.SpeechSynthesizerAidl ref = (com.iflytek.speech.SpeechSynthesizerAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.UtilityConfig::getCallerInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.speech.UtilityConfig.getCallerInfo(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.UtilityConfig::getComponentUrlParam_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.speech.UtilityConfig.getComponentUrlParam(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.ISpeechModule::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.ISpeechModule ref = (com.iflytek.speech.ISpeechModule) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.ISpeechModule::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.ISpeechModule ref = (com.iflytek.speech.ISpeechModule) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.ISpeechModule::getIntent_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.ISpeechModule ref = (com.iflytek.speech.ISpeechModule) getHEAP().get(refId);
            
                    // invoke native method
                    android.content.Intent result;
                    try {
                        result = ref.getIntent();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.ISpeechModule::destory_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.ISpeechModule ref = (com.iflytek.speech.ISpeechModule) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.ISpeechModule::isAvailable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.ISpeechModule ref = (com.iflytek.speech.ISpeechModule) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isAvailable();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.WakeuperResult::getResultString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.WakeuperResult ref = (com.iflytek.speech.WakeuperResult) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getResultString();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.VerifierResult::getResultString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VerifierResult ref = (com.iflytek.speech.VerifierResult) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getResultString();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.RecognizerResult::getResultString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.RecognizerResult ref = (com.iflytek.speech.RecognizerResult) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getResultString();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.Version::getVersionName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.speech.Version.getVersionName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.Version::getVersionCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.speech.Version.getVersionCode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.TextUnderstanderAidl::isUnderstanding_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.TextUnderstanderAidl ref = (com.iflytek.speech.TextUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isUnderstanding();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.TextUnderstanderAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.TextUnderstanderAidl ref = (com.iflytek.speech.TextUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.TextUnderstanderAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.TextUnderstanderAidl ref = (com.iflytek.speech.TextUnderstanderAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.UnderstanderResult::getResultString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.UnderstanderResult ref = (com.iflytek.speech.UnderstanderResult) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getResultString();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.VoiceWakeuperAidl::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VoiceWakeuperAidl ref = (com.iflytek.speech.VoiceWakeuperAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.VoiceWakeuperAidl::isListening_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VoiceWakeuperAidl ref = (com.iflytek.speech.VoiceWakeuperAidl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.VoiceWakeuperAidl::setParameter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VoiceWakeuperAidl ref = (com.iflytek.speech.VoiceWakeuperAidl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.speech.VoiceWakeuperAidl::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.speech.VoiceWakeuperAidl ref = (com.iflytek.speech.VoiceWakeuperAidl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onVolumeChanged_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onVolumeChanged(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onBeginOfSpeech_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onBeginOfSpeech();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onEndOfSpeech_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEndOfSpeech();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onResult_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.VerifierResult var1 = (com.iflytek.cloud.VerifierResult) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResult(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onError_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onError(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.VerifierListener::onEvent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // ref arg
                    android.os.Bundle var4 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.VerifierListener ref = (com.iflytek.cloud.VerifierListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEvent(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::getVerifier_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.SpeakerVerifier result;
                    try {
                        result = com.iflytek.cloud.SpeakerVerifier.getVerifier();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::generatePassword_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.generatePassword(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::stopListening_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::isListening_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeakerVerifier::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeakerVerifier ref = (com.iflytek.cloud.SpeakerVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.ui.RecognizerDialogListener::onResult_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.RecognizerResult var1 = (com.iflytek.cloud.RecognizerResult) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.ui.RecognizerDialogListener ref = (com.iflytek.cloud.ui.RecognizerDialogListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResult(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.ui.RecognizerDialogListener::onError_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.ui.RecognizerDialogListener ref = (com.iflytek.cloud.ui.RecognizerDialogListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onError(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.GrammarListener::onBuildFinish_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.iflytek.cloud.SpeechError var2 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.GrammarListener ref = (com.iflytek.cloud.GrammarListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onBuildFinish(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::getTranscripter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.SpeechTranscripter result;
                    try {
                        result = com.iflytek.cloud.SpeechTranscripter.getTranscripter();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::stopTranscripting_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopTranscripting();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::isTranscripting_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isTranscripting();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechTranscripter::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechTranscripter ref = (com.iflytek.cloud.SpeechTranscripter) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onSpeakBegin_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSpeakBegin();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onBufferProgress_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onBufferProgress(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onSpeakPaused_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSpeakPaused();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onSpeakResumed_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSpeakResumed();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onSpeakProgress_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onSpeakProgress(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onCompleted_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onCompleted(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SynthesizerListener::onEvent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // ref arg
                    android.os.Bundle var4 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SynthesizerListener ref = (com.iflytek.cloud.SynthesizerListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEvent(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.LexiconListener::onLexiconUpdated_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.iflytek.cloud.SpeechError var2 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.LexiconListener ref = (com.iflytek.cloud.LexiconListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onLexiconUpdated(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder::stopRecord_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder ref = (com.iflytek.cloud.record.PcmRecorder) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopRecord(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder::startRecording_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.record.PcmRecorder.PcmRecordListener var1 = (com.iflytek.cloud.record.PcmRecorder.PcmRecordListener) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder ref = (com.iflytek.cloud.record.PcmRecorder) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startRecording(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder::run_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder ref = (com.iflytek.cloud.record.PcmRecorder) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.run();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder.PcmRecordListener::onRecordBuffer_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder.PcmRecordListener ref = (com.iflytek.cloud.record.PcmRecorder.PcmRecordListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onRecordBuffer(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder.PcmRecordListener::onError_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder.PcmRecordListener ref = (com.iflytek.cloud.record.PcmRecorder.PcmRecordListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onError(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder.PcmRecordListener::onRecordStarted_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder.PcmRecordListener ref = (com.iflytek.cloud.record.PcmRecorder.PcmRecordListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onRecordStarted(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.record.PcmRecorder.PcmRecordListener::onRecordReleased_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.record.PcmRecorder.PcmRecordListener ref = (com.iflytek.cloud.record.PcmRecorder.PcmRecordListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onRecordReleased();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::getVerifier_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.IdentityVerifier result;
                    try {
                        result = com.iflytek.cloud.IdentityVerifier.getVerifier();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::writeData_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.writeData(var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::stopWrite_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopWrite(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::isWorking_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isWorking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityVerifier::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityVerifier ref = (com.iflytek.cloud.IdentityVerifier) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.Accelerometer.CLOCKWISE_ANGLE::getValue_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.Accelerometer.CLOCKWISE_ANGLE ref = (com.iflytek.cloud.util.Accelerometer.CLOCKWISE_ANGLE) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getValue();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.AudioDetector::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector ref = (com.iflytek.cloud.util.AudioDetector) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.AudioDetector::reset_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector ref = (com.iflytek.cloud.util.AudioDetector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.reset();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.AudioDetector::detect_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector ref = (com.iflytek.cloud.util.AudioDetector) getHEAP().get(refId);
            
                    // invoke native method
                    com.iflytek.cloud.util.AudioDetector.DetectorResult result;
                    try {
                        result = ref.detect(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.AudioDetector::setParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.AudioDetector ref = (com.iflytek.cloud.util.AudioDetector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::hasKey_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.hasKey(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::putWord__String_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.putWord(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::putWord__String__String_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.putWord(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::putWords__String_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    List<String> var1 = (List<String>) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.putWords(new ArrayList(var1));
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::putWords__String__String_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    List<String> var2 = (List<String>) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.putWords(var1, new ArrayList(var2));
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::getWords_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    List<String> result;
                    try {
                        result = ref.getWords();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::getKeys_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    List<String> result;
                    try {
                        result = ref.getKeys();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.UserWords::getWords__String_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.UserWords ref = (com.iflytek.cloud.util.UserWords) getHEAP().get(refId);
            
                    // invoke native method
                    List<String> result;
                    try {
                        result = ref.getWords(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.VerifierUtil::generateNumberPassword_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.cloud.util.VerifierUtil.generateNumberPassword(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.VerifierUtil::ARGB2Gray_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.graphics.Bitmap var0 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    android.graphics.Bitmap result;
                    try {
                        result = com.iflytek.cloud.util.VerifierUtil.ARGB2Gray(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.VerifierUtil::getBitmapsize_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.graphics.Bitmap var0 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.iflytek.cloud.util.VerifierUtil.getBitmapsize(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.ContactManager.ContactListener::onContactQueryFinish_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.ContactManager.ContactListener ref = (com.iflytek.cloud.util.ContactManager.ContactListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onContactQueryFinish(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.ResourceUtil::generateResourcePath_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // enum arg
                    com.iflytek.cloud.util.ResourceUtil.RESOURCE_TYPE var1 = com.iflytek.cloud.util.ResourceUtil.RESOURCE_TYPE.values()[(int) ((Map<String, Object>) args).get("var1")];
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.iflytek.cloud.util.ResourceUtil.generateResourcePath(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.Accelerometer::start_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.Accelerometer ref = (com.iflytek.cloud.util.Accelerometer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.start();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.Accelerometer::stop_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.Accelerometer ref = (com.iflytek.cloud.util.Accelerometer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stop();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.Accelerometer::getDirection_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.iflytek.cloud.util.Accelerometer.getDirection();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.ContactManager::destroy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.iflytek.cloud.util.ContactManager.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.ContactManager::queryAllContactsName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.ContactManager ref = (com.iflytek.cloud.util.ContactManager) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.queryAllContactsName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.ContactManager::asyncQueryAllContactsName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.ContactManager ref = (com.iflytek.cloud.util.ContactManager) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.asyncQueryAllContactsName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.VolumeUtil::computeVolume_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.iflytek.cloud.util.VolumeUtil.computeVolume(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.FileDownloadListener::onStart_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.FileDownloadListener ref = (com.iflytek.cloud.util.FileDownloadListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onStart();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.FileDownloadListener::onProgress_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.FileDownloadListener ref = (com.iflytek.cloud.util.FileDownloadListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onProgress(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.util.FileDownloadListener::onCompleted_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.iflytek.cloud.SpeechError var2 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.util.FileDownloadListener ref = (com.iflytek.cloud.util.FileDownloadListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onCompleted(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.FaceRequest::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.FaceRequest ref = (com.iflytek.cloud.FaceRequest) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.FaceRequest::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.FaceRequest ref = (com.iflytek.cloud.FaceRequest) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.FaceRequest::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.FaceRequest ref = (com.iflytek.cloud.FaceRequest) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.FaceRequest::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.FaceRequest ref = (com.iflytek.cloud.FaceRequest) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechListener::onEvent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var2 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechListener ref = (com.iflytek.cloud.SpeechListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEvent(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechListener::onBufferReceived_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechListener ref = (com.iflytek.cloud.SpeechListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onBufferReceived(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechListener::onCompleted_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechListener ref = (com.iflytek.cloud.SpeechListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onCompleted(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::createUtility_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.SpeechUtility result;
                    try {
                        result = com.iflytek.cloud.SpeechUtility.createUtility(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::getUtility_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.SpeechUtility result;
                    try {
                        result = com.iflytek.cloud.SpeechUtility.getUtility();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::checkServiceInstalled_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.checkServiceInstalled();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::queryAvailableEngines_batch", (argsBatch, methodResult) -> {
                List<List<String>> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    String[] result;
                    try {
                        result = ref.queryAvailableEngines();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<String> jsonableResult = new ArrayList<String>(java.util.Arrays.asList(result));
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::openEngineSettings_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.openEngineSettings(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::getComponentUrl_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getComponentUrl();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::getPlusLocalInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getPlusLocalInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUtility::getServiceVersion_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUtility ref = (com.iflytek.cloud.SpeechUtility) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getServiceVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::getSynthesizer_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.SpeechSynthesizer result;
                    try {
                        result = com.iflytek.cloud.SpeechSynthesizer.getSynthesizer();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::pauseSpeaking_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.pauseSpeaking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::resumeSpeaking_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resumeSpeaking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::stopSpeaking_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopSpeaking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::isSpeaking_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isSpeaking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechSynthesizer::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechSynthesizer ref = (com.iflytek.cloud.SpeechSynthesizer) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.IdentityResult::getResultString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.IdentityResult ref = (com.iflytek.cloud.IdentityResult) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getResultString();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onVolumeChanged_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onVolumeChanged(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onBeginOfSpeech_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onBeginOfSpeech();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onEndOfSpeech_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEndOfSpeech();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onResult_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.UnderstanderResult var1 = (com.iflytek.cloud.UnderstanderResult) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResult(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onError_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.iflytek.cloud.SpeechError var1 = (com.iflytek.cloud.SpeechError) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onError(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.SpeechUnderstanderListener::onEvent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // ref arg
                    android.os.Bundle var4 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.SpeechUnderstanderListener ref = (com.iflytek.cloud.SpeechUnderstanderListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onEvent(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::getTextUnderstander_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.iflytek.cloud.TextUnderstander result;
                    try {
                        result = com.iflytek.cloud.TextUnderstander.getTextUnderstander();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::isUnderstanding_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.TextUnderstander ref = (com.iflytek.cloud.TextUnderstander) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isUnderstanding();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.TextUnderstander ref = (com.iflytek.cloud.TextUnderstander) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::setParameter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.TextUnderstander ref = (com.iflytek.cloud.TextUnderstander) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.setParameter(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::getParameter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.TextUnderstander ref = (com.iflytek.cloud.TextUnderstander) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getParameter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.TextUnderstander::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.TextUnderstander ref = (com.iflytek.cloud.TextUnderstander) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::restartWorking__String_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.restartWorking(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::stopListening_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::destroy_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.VoiceWakeuperImpl::isListening_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.VoiceWakeuperImpl ref = (com.iflytek.cloud.speech.impl.VoiceWakeuperImpl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isListening();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::pushSessionInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.pushSessionInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::writeAudio_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.writeAudio(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::stopTranscripting_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopTranscripting();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::isTranscripting_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isTranscripting();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::getSessionID_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getSessionID();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::getUploadBytes_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getUploadBytes();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.iflytek.cloud.speech.impl.SpeechTranscripterImpl::getSyncID_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.iflytek.cloud.speech.impl.SpeechTranscripterImpl ref = (com.iflytek.cloud.speech.impl.SpeechTranscripterImpl) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getSyncID();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
