//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "XfttsFluttifyPlugin.h"
#import <objc/runtime.h>
#import "SubHandler/SubHandler0.h"
#import "SubHandler/SubHandler1.h"
#import "SubHandler/SubHandler2.h"
#import "SubHandler/SubHandler3.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation XfttsFluttifyPlugin {
  NSMutableDictionary<NSString*, Handler>* _handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{}.mutableCopy;

    [_handlerMap addEntriesFromDictionary: [self getSubHandler0]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler1]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler2]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler3]];
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/xftts_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[XfttsFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  [registrar registerViewFactory: [[IFlyRecognizerViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/IFlyRecognizerView"];
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)onCompleted : (IFlySpeechError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onCompleted");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onCompleted" arguments:@{@"error": argerror}];
  
}

- (void)onSpeakBegin 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakBegin");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakBegin" arguments:@{}];
  
}

- (void)onBufferProgress : (int)progress message: (NSString*)msg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onBufferProgressMessage");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // jsonable callback arg
  NSString* argmsg = msg;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onBufferProgressMessage" arguments:@{@"progress": argprogress, @"msg": argmsg}];
  
}

- (void)onSpeakProgress : (int)progress beginPos: (int)beginPos endPos: (int)endPos
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakProgressBeginPosendPos");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // primitive callback arg
  NSNumber* argbeginPos = @(beginPos);
  // primitive callback arg
  NSNumber* argendPos = @(endPos);

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakProgressBeginPosendPos" arguments:@{@"progress": argprogress, @"beginPos": argbeginPos, @"endPos": argendPos}];
  
}

- (void)onSpeakPaused 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakPaused");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakPaused" arguments:@{}];
  
}

- (void)onSpeakResumed 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakResumed");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakResumed" arguments:@{}];
  
}

- (void)onSpeakCancel 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakCancel");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakCancel" arguments:@{}];
  
}

- (void)onEvent : (int)eventType arg0: (int)arg0 arg1: (int)arg1 data: (NSData*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onEventArg0arg1data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argarg0 = @(arg0);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // ref callback arg
  NSNumber* argeventData = @(eventData.hash);
  HEAP[argeventData] = eventData;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onEventArg0arg1data" arguments:@{@"eventType": argeventType, @"arg0": argarg0, @"arg1": argarg1, @"eventData": argeventData}];
  
}

- (void)onResult : (NSArray*)resultArray isLast: (BOOL)isLast
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyRecognizerViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyRecognizerViewDelegate::onResultIsLast");
  }

  // convert to jsonable arg
  // list callback arg
  NSMutableArray<NSNumber*>* argresultArray = [NSMutableArray arrayWithCapacity:resultArray.count];
  for (int i = 0; i < resultArray.count; i++) {
      NSObject* item = ((NSObject*) [resultArray objectAtIndex:i]);
      // return to dart side data
      argresultArray[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // primitive callback arg
  NSNumber* argisLast = @(isLast);

  [channel invokeMethod:@"Callback::IFlyRecognizerViewDelegate::onResultIsLast" arguments:@{@"resultArray": argresultArray, @"isLast": argisLast}];
  
}

- (void)onIFlyRecorderBuffer : (const void*)buffer bufferSize: (int)size
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderBufferBufferSize");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argbuffer = @([NSValue valueWithPointer:buffer].hash);
  HEAP[argbuffer] = [NSValue valueWithPointer:buffer];
  // primitive callback arg
  NSNumber* argsize = @(size);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderBufferBufferSize" arguments:@{@"buffer": argbuffer, @"size": argsize}];
  
}

- (void)onIFlyRecorderError : (IFlyPcmRecorder*)recoder theError: (int)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderErrorTheError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrecoder = @(recoder.hash);
  HEAP[argrecoder] = recoder;
  // primitive callback arg
  NSNumber* argerror = @(error);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderErrorTheError" arguments:@{@"recoder": argrecoder, @"error": argerror}];
  
}

- (void)onIFlyRecorderVolumeChanged : (int)power
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argpower = @(power);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged" arguments:@{@"power": argpower}];
  
}

- (void)onResults : (IFlyIdentityResult*)results isLast: (BOOL)isLast
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyIdentityVerifierDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyIdentityVerifierDelegate::onResultsIsLast");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argresults = @(results.hash);
  HEAP[argresults] = results;
  // primitive callback arg
  NSNumber* argisLast = @(isLast);

  [channel invokeMethod:@"Callback::IFlyIdentityVerifierDelegate::onResultsIsLast" arguments:@{@"results": argresults, @"isLast": argisLast}];
  
}

- (void)onEvent : (int)eventType arg1: (int)arg1 arg2: (int)arg2 extra: (id)obj
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyIdentityVerifierDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyIdentityVerifierDelegate::onEventArg1arg2extra");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // primitive callback arg
  NSNumber* argarg2 = @(arg2);
  // ref callback arg
  NSNumber* argobj = @(((NSObject*) obj).hash);
  HEAP[argobj] = ((NSObject*) obj);

  [channel invokeMethod:@"Callback::IFlyIdentityVerifierDelegate::onEventArg1arg2extra" arguments:@{@"eventType": argeventType, @"arg1": argarg1, @"arg2": argarg2, @"obj": argobj}];
  
}

- (void)onResult : (NSDictionary*)dic
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onResult");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argdic = @(dic.hash);
  HEAP[argdic] = dic;

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onResult" arguments:@{@"dic": argdic}];
  
}

- (void)onRecognition 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onRecognition");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onRecognition" arguments:@{}];
  
}

- (void)onVolumeChanged : (int)volume
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argvolume = @(volume);

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onVolumeChanged" arguments:@{@"volume": argvolume}];
  
}

- (void)onBeginOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onBeginOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onBeginOfSpeech" arguments:@{}];
  
}

- (void)onEndOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEndOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEndOfSpeech" arguments:@{}];
  
}

- (void)onEvent : (int)eventType isLast: (BOOL)isLast arg1: (int)arg1 data: (NSMutableDictionary*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEventIsLastarg1data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argisLast = @(isLast);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // ref callback arg
  NSNumber* argeventData = @(eventData.hash);
  HEAP[argeventData] = eventData;

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEventIsLastarg1data" arguments:@{@"eventType": argeventType, @"isLast": argisLast, @"arg1": argarg1, @"eventData": argeventData}];
  
}


@end